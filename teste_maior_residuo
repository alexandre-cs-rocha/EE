def teste_maior_residuo(vet_estados, vet_med):
    # Calculo das matrizes de covariancia
    l=len(vet_med)
    des_pad = desvio_padrao(vet_med)
    Covar_medidas = np.zeros((l,l))
    H = Calcula_Jacobiana(vet_estados,l)
    W = Calcula_pesos(l)    
    G = np.dot(np.dot(H.T, W), H)
    for i in range(l):
        Covar_medidas[i][i]= des_pad[i]**2

    Covar_estados_estimados = np.linalg.inv(np.dot(np.dot(np.transpose(H),np.linalg.inv(Covar_medidas)),H))
    Covar_medidas_estimadas = np.dot(np.dot(H,Covar_estados_estimados),np.transpose(H))
    Covar_residuos = Covar_medidas-Covar_medidas_estimadas

    # Normalização das Covariâncias
    diag = np.diag(Covar_residuos)

    # Matrix de covariancias normalizadas
    Rn = np.zeros((len(diag),len(diag)))
    for i in range(len(diag)):
        Rn[i][i] = float(diag[i])**(-1/2)

    #Covar_residuos_normalizados = np.dot(np.dot(Rn,Covar_residuos),Rn)
    Matriz_Sensibilidade=np.identity(l)-np.dot(np.dot(np.dot(H,np.linalg.inv(G)),H.T),W)

    # Vetor de covarancias normalizadas
    vetor_residuos = np.dot(Matriz_Sensibilidade,vet_med)

    #vetor_residuos_normalizados = np.dot(Rn,vetor_residuos)
    
    # Análise de erro e de b^
    Matriz_erros = vetor_residuos/np.diag(Matriz_Sensibilidade)
    Matriz_b=np.asarray([0,0,0,0])

    for i in range(len(des_pad)):
        Matriz_b[i] = abs(Matriz_erros[i]/des_pad[i])

    maxb=np.max(Matriz_b)
    index_maxb = np.argmax(Matriz_b)
    med_b =vet_med[index_maxb]

    if abs(maxb)>3:
        vet_med_novo = vet_med
        vet_med_novo[index_maxb] = med_b-Matriz_erros[index_maxb]
        print(f'A medida {med_b} provavelmente contém um erro grosseiro,\n uma estimativa para ela seria: {vet_med_novo[index_maxb]}.\n Com essa nova medida, o resutado do estimador de estados seria: {EE(vet_med_novo, vet_estados, W, 10**-3)}\n Nesse sentido, um novo teste de maior residuo teria como resultado: {teste_maior_residuo(EE(vet_med_novo, vet_estados, W, 10**-3),vet_med_novo, des_pad)}')
        return 'A estimação provavelmente contém erros grosseiros.'
    
    else:
        return 'A estimação provavelmente não contém erros grosseiros.'
                            
#teste_maior_residuo(vet_estados, vet_med)
